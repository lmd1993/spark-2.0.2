package org.apache.spark.sql.catalyst.parser;
/**
 * The post-processor validates &amp; cleans-up the parse tree during the parse process.
 */
public  class PostProcessor {
  /** Remove the back ticks from an Identifier. */
  static public  void exitQuotedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuotedIdentifierContext ctx)  { throw new RuntimeException(); }
  /** Treat non-reserved keywords as Identifiers. */
  static public  void exitNonReserved (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NonReservedContext ctx)  { throw new RuntimeException(); }
  static private  void replaceTokenByIdentifier (org.antlr.v4.runtime.ParserRuleContext ctx, int stripMargins, scala.Function1<org.antlr.v4.runtime.CommonToken, org.antlr.v4.runtime.CommonToken> f)  { throw new RuntimeException(); }
  static public  void enterSingleStatement (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleStatementContext x$1)  { throw new RuntimeException(); }
  static public  void exitSingleStatement (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleStatementContext x$1)  { throw new RuntimeException(); }
  static public  void enterSingleExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void exitSingleExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void enterSingleTableIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleTableIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitSingleTableIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleTableIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterSingleDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void exitSingleDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void enterStatementDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StatementDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitStatementDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StatementDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterUse (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UseContext x$1)  { throw new RuntimeException(); }
  static public  void exitUse (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UseContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetDatabaseProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetDatabasePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetDatabaseProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetDatabasePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void enterDropDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void exitDropDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateTableUsing (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableUsingContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateTableUsing (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableUsingContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateTableLike (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableLikeContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateTableLike (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableLikeContext x$1)  { throw new RuntimeException(); }
  static public  void enterAnalyze (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AnalyzeContext x$1)  { throw new RuntimeException(); }
  static public  void exitAnalyze (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AnalyzeContext x$1)  { throw new RuntimeException(); }
  static public  void enterRenameTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RenameTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitRenameTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RenameTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetTableProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTablePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetTableProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTablePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void enterUnsetTableProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnsetTablePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void exitUnsetTableProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnsetTablePropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetTableSerDe (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTableSerDeContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetTableSerDe (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTableSerDeContext x$1)  { throw new RuntimeException(); }
  static public  void enterAddTablePartition (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AddTablePartitionContext x$1)  { throw new RuntimeException(); }
  static public  void exitAddTablePartition (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AddTablePartitionContext x$1)  { throw new RuntimeException(); }
  static public  void enterRenameTablePartition (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RenameTablePartitionContext x$1)  { throw new RuntimeException(); }
  static public  void exitRenameTablePartition (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RenameTablePartitionContext x$1)  { throw new RuntimeException(); }
  static public  void enterDropTablePartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropTablePartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void exitDropTablePartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropTablePartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetTableLocation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTableLocationContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetTableLocation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetTableLocationContext x$1)  { throw new RuntimeException(); }
  static public  void enterRecoverPartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RecoverPartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void exitRecoverPartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RecoverPartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void enterDropTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitDropTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateView (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateViewContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateView (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateViewContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateTempViewUsing (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTempViewUsingContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateTempViewUsing (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTempViewUsingContext x$1)  { throw new RuntimeException(); }
  static public  void enterAlterViewQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AlterViewQueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitAlterViewQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AlterViewQueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void enterDropFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void exitDropFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DropFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void enterExplain (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExplainContext x$1)  { throw new RuntimeException(); }
  static public  void exitExplain (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExplainContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowTables (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowTablesContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowTables (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowTablesContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowDatabases (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowDatabasesContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowDatabases (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowDatabasesContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowTblProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowTblPropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowTblProperties (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowTblPropertiesContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowColumns (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowColumnsContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowColumns (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowColumnsContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowPartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowPartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowPartitions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowPartitionsContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowFunctions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowFunctionsContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowFunctions (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowFunctionsContext x$1)  { throw new RuntimeException(); }
  static public  void enterShowCreateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowCreateTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitShowCreateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ShowCreateTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterDescribeFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void exitDescribeFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void enterDescribeDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void exitDescribeDatabase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeDatabaseContext x$1)  { throw new RuntimeException(); }
  static public  void enterDescribeTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitDescribeTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterRefreshTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RefreshTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitRefreshTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RefreshTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterRefreshResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RefreshResourceContext x$1)  { throw new RuntimeException(); }
  static public  void exitRefreshResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RefreshResourceContext x$1)  { throw new RuntimeException(); }
  static public  void enterCacheTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CacheTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitCacheTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CacheTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterUncacheTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UncacheTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitUncacheTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UncacheTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterClearCache (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ClearCacheContext x$1)  { throw new RuntimeException(); }
  static public  void exitClearCache (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ClearCacheContext x$1)  { throw new RuntimeException(); }
  static public  void enterLoadData (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LoadDataContext x$1)  { throw new RuntimeException(); }
  static public  void exitLoadData (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LoadDataContext x$1)  { throw new RuntimeException(); }
  static public  void enterTruncateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TruncateTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitTruncateTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TruncateTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterRepairTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RepairTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitRepairTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RepairTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterManageResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ManageResourceContext x$1)  { throw new RuntimeException(); }
  static public  void exitManageResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ManageResourceContext x$1)  { throw new RuntimeException(); }
  static public  void enterFailNativeCommand (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FailNativeCommandContext x$1)  { throw new RuntimeException(); }
  static public  void exitFailNativeCommand (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FailNativeCommandContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetConfiguration (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetConfigurationContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetConfiguration (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetConfigurationContext x$1)  { throw new RuntimeException(); }
  static public  void enterResetConfiguration (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ResetConfigurationContext x$1)  { throw new RuntimeException(); }
  static public  void exitResetConfiguration (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ResetConfigurationContext x$1)  { throw new RuntimeException(); }
  static public  void enterUnsupportedHiveNativeCommands (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnsupportedHiveNativeCommandsContext x$1)  { throw new RuntimeException(); }
  static public  void exitUnsupportedHiveNativeCommands (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnsupportedHiveNativeCommandsContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateTableHeader (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableHeaderContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateTableHeader (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateTableHeaderContext x$1)  { throw new RuntimeException(); }
  static public  void enterBucketSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BucketSpecContext x$1)  { throw new RuntimeException(); }
  static public  void exitBucketSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BucketSpecContext x$1)  { throw new RuntimeException(); }
  static public  void enterSkewSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SkewSpecContext x$1)  { throw new RuntimeException(); }
  static public  void exitSkewSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SkewSpecContext x$1)  { throw new RuntimeException(); }
  static public  void enterLocationSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LocationSpecContext x$1)  { throw new RuntimeException(); }
  static public  void exitLocationSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LocationSpecContext x$1)  { throw new RuntimeException(); }
  static public  void enterQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterInsertInto (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InsertIntoContext x$1)  { throw new RuntimeException(); }
  static public  void exitInsertInto (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InsertIntoContext x$1)  { throw new RuntimeException(); }
  static public  void enterPartitionSpecLocation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionSpecLocationContext x$1)  { throw new RuntimeException(); }
  static public  void exitPartitionSpecLocation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionSpecLocationContext x$1)  { throw new RuntimeException(); }
  static public  void enterPartitionSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionSpecContext x$1)  { throw new RuntimeException(); }
  static public  void exitPartitionSpec (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionSpecContext x$1)  { throw new RuntimeException(); }
  static public  void enterPartitionVal (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionValContext x$1)  { throw new RuntimeException(); }
  static public  void exitPartitionVal (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PartitionValContext x$1)  { throw new RuntimeException(); }
  static public  void enterDescribeFuncName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeFuncNameContext x$1)  { throw new RuntimeException(); }
  static public  void exitDescribeFuncName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeFuncNameContext x$1)  { throw new RuntimeException(); }
  static public  void enterDescribeColName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeColNameContext x$1)  { throw new RuntimeException(); }
  static public  void exitDescribeColName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DescribeColNameContext x$1)  { throw new RuntimeException(); }
  static public  void enterCtes (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CtesContext x$1)  { throw new RuntimeException(); }
  static public  void exitCtes (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CtesContext x$1)  { throw new RuntimeException(); }
  static public  void enterNamedQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedQueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitNamedQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedQueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterTableProvider (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableProviderContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableProvider (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableProviderContext x$1)  { throw new RuntimeException(); }
  static public  void enterTablePropertyList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyListContext x$1)  { throw new RuntimeException(); }
  static public  void exitTablePropertyList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyListContext x$1)  { throw new RuntimeException(); }
  static public  void enterTableProperty (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableProperty (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyContext x$1)  { throw new RuntimeException(); }
  static public  void enterTablePropertyKey (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyKeyContext x$1)  { throw new RuntimeException(); }
  static public  void exitTablePropertyKey (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TablePropertyKeyContext x$1)  { throw new RuntimeException(); }
  static public  void enterConstantList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ConstantListContext x$1)  { throw new RuntimeException(); }
  static public  void exitConstantList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ConstantListContext x$1)  { throw new RuntimeException(); }
  static public  void enterNestedConstantList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NestedConstantListContext x$1)  { throw new RuntimeException(); }
  static public  void exitNestedConstantList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NestedConstantListContext x$1)  { throw new RuntimeException(); }
  static public  void enterCreateFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void exitCreateFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CreateFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void enterTableFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void enterGenericFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.GenericFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void exitGenericFileFormat (org.apache.spark.sql.catalyst.parser.SqlBaseParser.GenericFileFormatContext x$1)  { throw new RuntimeException(); }
  static public  void enterStorageHandler (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StorageHandlerContext x$1)  { throw new RuntimeException(); }
  static public  void exitStorageHandler (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StorageHandlerContext x$1)  { throw new RuntimeException(); }
  static public  void enterResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ResourceContext x$1)  { throw new RuntimeException(); }
  static public  void exitResource (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ResourceContext x$1)  { throw new RuntimeException(); }
  static public  void enterSingleInsertQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleInsertQueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitSingleInsertQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SingleInsertQueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterMultiInsertQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.MultiInsertQueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitMultiInsertQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.MultiInsertQueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterQueryOrganization (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryOrganizationContext x$1)  { throw new RuntimeException(); }
  static public  void exitQueryOrganization (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryOrganizationContext x$1)  { throw new RuntimeException(); }
  static public  void enterMultiInsertQueryBody (org.apache.spark.sql.catalyst.parser.SqlBaseParser.MultiInsertQueryBodyContext x$1)  { throw new RuntimeException(); }
  static public  void exitMultiInsertQueryBody (org.apache.spark.sql.catalyst.parser.SqlBaseParser.MultiInsertQueryBodyContext x$1)  { throw new RuntimeException(); }
  static public  void enterQueryTermDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryTermDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitQueryTermDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryTermDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetOperation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetOperationContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetOperation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetOperationContext x$1)  { throw new RuntimeException(); }
  static public  void enterQueryPrimaryDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryPrimaryDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitQueryPrimaryDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QueryPrimaryDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableContext x$1)  { throw new RuntimeException(); }
  static public  void exitTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableContext x$1)  { throw new RuntimeException(); }
  static public  void enterInlineTableDefault1 (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableDefault1Context x$1)  { throw new RuntimeException(); }
  static public  void exitInlineTableDefault1 (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableDefault1Context x$1)  { throw new RuntimeException(); }
  static public  void enterSubquery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubqueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitSubquery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubqueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterSortItem (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SortItemContext x$1)  { throw new RuntimeException(); }
  static public  void exitSortItem (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SortItemContext x$1)  { throw new RuntimeException(); }
  static public  void enterQuerySpecification (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuerySpecificationContext x$1)  { throw new RuntimeException(); }
  static public  void exitQuerySpecification (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuerySpecificationContext x$1)  { throw new RuntimeException(); }
  static public  void enterFromClause (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FromClauseContext x$1)  { throw new RuntimeException(); }
  static public  void exitFromClause (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FromClauseContext x$1)  { throw new RuntimeException(); }
  static public  void enterAggregation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AggregationContext x$1)  { throw new RuntimeException(); }
  static public  void exitAggregation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AggregationContext x$1)  { throw new RuntimeException(); }
  static public  void enterGroupingSet (org.apache.spark.sql.catalyst.parser.SqlBaseParser.GroupingSetContext x$1)  { throw new RuntimeException(); }
  static public  void exitGroupingSet (org.apache.spark.sql.catalyst.parser.SqlBaseParser.GroupingSetContext x$1)  { throw new RuntimeException(); }
  static public  void enterLateralView (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LateralViewContext x$1)  { throw new RuntimeException(); }
  static public  void exitLateralView (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LateralViewContext x$1)  { throw new RuntimeException(); }
  static public  void enterSetQuantifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetQuantifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitSetQuantifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SetQuantifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RelationContext x$1)  { throw new RuntimeException(); }
  static public  void exitRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RelationContext x$1)  { throw new RuntimeException(); }
  static public  void enterJoinRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinRelationContext x$1)  { throw new RuntimeException(); }
  static public  void exitJoinRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinRelationContext x$1)  { throw new RuntimeException(); }
  static public  void enterJoinType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinTypeContext x$1)  { throw new RuntimeException(); }
  static public  void exitJoinType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinTypeContext x$1)  { throw new RuntimeException(); }
  static public  void enterJoinCriteria (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinCriteriaContext x$1)  { throw new RuntimeException(); }
  static public  void exitJoinCriteria (org.apache.spark.sql.catalyst.parser.SqlBaseParser.JoinCriteriaContext x$1)  { throw new RuntimeException(); }
  static public  void enterSample (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SampleContext x$1)  { throw new RuntimeException(); }
  static public  void exitSample (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SampleContext x$1)  { throw new RuntimeException(); }
  static public  void enterIdentifierList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierListContext x$1)  { throw new RuntimeException(); }
  static public  void exitIdentifierList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierListContext x$1)  { throw new RuntimeException(); }
  static public  void enterIdentifierSeq (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierSeqContext x$1)  { throw new RuntimeException(); }
  static public  void exitIdentifierSeq (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierSeqContext x$1)  { throw new RuntimeException(); }
  static public  void enterOrderedIdentifierList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.OrderedIdentifierListContext x$1)  { throw new RuntimeException(); }
  static public  void exitOrderedIdentifierList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.OrderedIdentifierListContext x$1)  { throw new RuntimeException(); }
  static public  void enterOrderedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.OrderedIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitOrderedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.OrderedIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterIdentifierCommentList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierCommentListContext x$1)  { throw new RuntimeException(); }
  static public  void exitIdentifierCommentList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierCommentListContext x$1)  { throw new RuntimeException(); }
  static public  void enterIdentifierComment (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierCommentContext x$1)  { throw new RuntimeException(); }
  static public  void exitIdentifierComment (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierCommentContext x$1)  { throw new RuntimeException(); }
  static public  void enterTableName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableNameContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableNameContext x$1)  { throw new RuntimeException(); }
  static public  void enterAliasedQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AliasedQueryContext x$1)  { throw new RuntimeException(); }
  static public  void exitAliasedQuery (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AliasedQueryContext x$1)  { throw new RuntimeException(); }
  static public  void enterAliasedRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AliasedRelationContext x$1)  { throw new RuntimeException(); }
  static public  void exitAliasedRelation (org.apache.spark.sql.catalyst.parser.SqlBaseParser.AliasedRelationContext x$1)  { throw new RuntimeException(); }
  static public  void enterInlineTableDefault2 (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableDefault2Context x$1)  { throw new RuntimeException(); }
  static public  void exitInlineTableDefault2 (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableDefault2Context x$1)  { throw new RuntimeException(); }
  static public  void enterTableValuedFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableValuedFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableValuedFunction (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableValuedFunctionContext x$1)  { throw new RuntimeException(); }
  static public  void enterInlineTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableContext x$1)  { throw new RuntimeException(); }
  static public  void exitInlineTable (org.apache.spark.sql.catalyst.parser.SqlBaseParser.InlineTableContext x$1)  { throw new RuntimeException(); }
  static public  void enterRowFormatSerde (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowFormatSerdeContext x$1)  { throw new RuntimeException(); }
  static public  void exitRowFormatSerde (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowFormatSerdeContext x$1)  { throw new RuntimeException(); }
  static public  void enterRowFormatDelimited (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowFormatDelimitedContext x$1)  { throw new RuntimeException(); }
  static public  void exitRowFormatDelimited (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowFormatDelimitedContext x$1)  { throw new RuntimeException(); }
  static public  void enterTableIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitTableIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TableIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterNamedExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void exitNamedExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void enterNamedExpressionSeq (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedExpressionSeqContext x$1)  { throw new RuntimeException(); }
  static public  void exitNamedExpressionSeq (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedExpressionSeqContext x$1)  { throw new RuntimeException(); }
  static public  void enterExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void exitExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void enterLogicalNot (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LogicalNotContext x$1)  { throw new RuntimeException(); }
  static public  void exitLogicalNot (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LogicalNotContext x$1)  { throw new RuntimeException(); }
  static public  void enterBooleanDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitBooleanDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterExists (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExistsContext x$1)  { throw new RuntimeException(); }
  static public  void exitExists (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ExistsContext x$1)  { throw new RuntimeException(); }
  static public  void enterLogicalBinary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LogicalBinaryContext x$1)  { throw new RuntimeException(); }
  static public  void exitLogicalBinary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.LogicalBinaryContext x$1)  { throw new RuntimeException(); }
  static public  void enterPredicated (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicatedContext x$1)  { throw new RuntimeException(); }
  static public  void exitPredicated (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicatedContext x$1)  { throw new RuntimeException(); }
  static public  void enterPredicate (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicateContext x$1)  { throw new RuntimeException(); }
  static public  void exitPredicate (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicateContext x$1)  { throw new RuntimeException(); }
  static public  void enterValueExpressionDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ValueExpressionDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitValueExpressionDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ValueExpressionDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterComparison (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComparisonContext x$1)  { throw new RuntimeException(); }
  static public  void exitComparison (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComparisonContext x$1)  { throw new RuntimeException(); }
  static public  void enterArithmeticBinary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticBinaryContext x$1)  { throw new RuntimeException(); }
  static public  void exitArithmeticBinary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticBinaryContext x$1)  { throw new RuntimeException(); }
  static public  void enterArithmeticUnary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticUnaryContext x$1)  { throw new RuntimeException(); }
  static public  void exitArithmeticUnary (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticUnaryContext x$1)  { throw new RuntimeException(); }
  static public  void enterDereference (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DereferenceContext x$1)  { throw new RuntimeException(); }
  static public  void exitDereference (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DereferenceContext x$1)  { throw new RuntimeException(); }
  static public  void enterSimpleCase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SimpleCaseContext x$1)  { throw new RuntimeException(); }
  static public  void exitSimpleCase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SimpleCaseContext x$1)  { throw new RuntimeException(); }
  static public  void enterColumnReference (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColumnReferenceContext x$1)  { throw new RuntimeException(); }
  static public  void exitColumnReference (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColumnReferenceContext x$1)  { throw new RuntimeException(); }
  static public  void enterRowConstructor (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowConstructorContext x$1)  { throw new RuntimeException(); }
  static public  void exitRowConstructor (org.apache.spark.sql.catalyst.parser.SqlBaseParser.RowConstructorContext x$1)  { throw new RuntimeException(); }
  static public  void enterStar (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StarContext x$1)  { throw new RuntimeException(); }
  static public  void exitStar (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StarContext x$1)  { throw new RuntimeException(); }
  static public  void enterSubscript (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubscriptContext x$1)  { throw new RuntimeException(); }
  static public  void exitSubscript (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubscriptContext x$1)  { throw new RuntimeException(); }
  static public  void enterTimeFunctionCall (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TimeFunctionCallContext x$1)  { throw new RuntimeException(); }
  static public  void exitTimeFunctionCall (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TimeFunctionCallContext x$1)  { throw new RuntimeException(); }
  static public  void enterSubqueryExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubqueryExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void exitSubqueryExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SubqueryExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void enterCast (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CastContext x$1)  { throw new RuntimeException(); }
  static public  void exitCast (org.apache.spark.sql.catalyst.parser.SqlBaseParser.CastContext x$1)  { throw new RuntimeException(); }
  static public  void enterConstantDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ConstantDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void exitConstantDefault (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ConstantDefaultContext x$1)  { throw new RuntimeException(); }
  static public  void enterParenthesizedExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ParenthesizedExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void exitParenthesizedExpression (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ParenthesizedExpressionContext x$1)  { throw new RuntimeException(); }
  static public  void enterFunctionCall (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FunctionCallContext x$1)  { throw new RuntimeException(); }
  static public  void exitFunctionCall (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FunctionCallContext x$1)  { throw new RuntimeException(); }
  static public  void enterSearchedCase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SearchedCaseContext x$1)  { throw new RuntimeException(); }
  static public  void exitSearchedCase (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SearchedCaseContext x$1)  { throw new RuntimeException(); }
  static public  void enterNullLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NullLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitNullLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NullLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterIntervalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitIntervalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterTypeConstructor (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TypeConstructorContext x$1)  { throw new RuntimeException(); }
  static public  void exitTypeConstructor (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TypeConstructorContext x$1)  { throw new RuntimeException(); }
  static public  void enterNumericLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NumericLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitNumericLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NumericLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterBooleanLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitBooleanLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterStringLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StringLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitStringLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.StringLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterComparisonOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComparisonOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void exitComparisonOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComparisonOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void enterArithmeticOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void exitArithmeticOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ArithmeticOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void enterPredicateOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicateOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void exitPredicateOperator (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PredicateOperatorContext x$1)  { throw new RuntimeException(); }
  static public  void enterBooleanValue (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanValueContext x$1)  { throw new RuntimeException(); }
  static public  void exitBooleanValue (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BooleanValueContext x$1)  { throw new RuntimeException(); }
  static public  void enterInterval (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalContext x$1)  { throw new RuntimeException(); }
  static public  void exitInterval (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalContext x$1)  { throw new RuntimeException(); }
  static public  void enterIntervalField (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalFieldContext x$1)  { throw new RuntimeException(); }
  static public  void exitIntervalField (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalFieldContext x$1)  { throw new RuntimeException(); }
  static public  void enterIntervalValue (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalValueContext x$1)  { throw new RuntimeException(); }
  static public  void exitIntervalValue (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntervalValueContext x$1)  { throw new RuntimeException(); }
  static public  void enterComplexDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComplexDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void exitComplexDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ComplexDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void enterPrimitiveDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PrimitiveDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void exitPrimitiveDataType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.PrimitiveDataTypeContext x$1)  { throw new RuntimeException(); }
  static public  void enterColTypeList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColTypeListContext x$1)  { throw new RuntimeException(); }
  static public  void exitColTypeList (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColTypeListContext x$1)  { throw new RuntimeException(); }
  static public  void enterColType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColTypeContext x$1)  { throw new RuntimeException(); }
  static public  void exitColType (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ColTypeContext x$1)  { throw new RuntimeException(); }
  static public  void enterWhenClause (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WhenClauseContext x$1)  { throw new RuntimeException(); }
  static public  void exitWhenClause (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WhenClauseContext x$1)  { throw new RuntimeException(); }
  static public  void enterWindows (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowsContext x$1)  { throw new RuntimeException(); }
  static public  void exitWindows (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowsContext x$1)  { throw new RuntimeException(); }
  static public  void enterNamedWindow (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedWindowContext x$1)  { throw new RuntimeException(); }
  static public  void exitNamedWindow (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NamedWindowContext x$1)  { throw new RuntimeException(); }
  static public  void enterWindowRef (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowRefContext x$1)  { throw new RuntimeException(); }
  static public  void exitWindowRef (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowRefContext x$1)  { throw new RuntimeException(); }
  static public  void enterWindowDef (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowDefContext x$1)  { throw new RuntimeException(); }
  static public  void exitWindowDef (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowDefContext x$1)  { throw new RuntimeException(); }
  static public  void enterWindowFrame (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowFrameContext x$1)  { throw new RuntimeException(); }
  static public  void exitWindowFrame (org.apache.spark.sql.catalyst.parser.SqlBaseParser.WindowFrameContext x$1)  { throw new RuntimeException(); }
  static public  void enterFrameBound (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FrameBoundContext x$1)  { throw new RuntimeException(); }
  static public  void exitFrameBound (org.apache.spark.sql.catalyst.parser.SqlBaseParser.FrameBoundContext x$1)  { throw new RuntimeException(); }
  static public  void enterQualifiedName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QualifiedNameContext x$1)  { throw new RuntimeException(); }
  static public  void exitQualifiedName (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QualifiedNameContext x$1)  { throw new RuntimeException(); }
  static public  void enterIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterUnquotedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnquotedIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void exitUnquotedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.UnquotedIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterQuotedIdentifierAlternative (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuotedIdentifierAlternativeContext x$1)  { throw new RuntimeException(); }
  static public  void exitQuotedIdentifierAlternative (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuotedIdentifierAlternativeContext x$1)  { throw new RuntimeException(); }
  static public  void enterQuotedIdentifier (org.apache.spark.sql.catalyst.parser.SqlBaseParser.QuotedIdentifierContext x$1)  { throw new RuntimeException(); }
  static public  void enterDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterScientificDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ScientificDecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitScientificDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.ScientificDecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterIntegerLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntegerLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitIntegerLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.IntegerLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterBigIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BigIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitBigIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BigIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterSmallIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SmallIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitSmallIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.SmallIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterTinyIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TinyIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitTinyIntLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.TinyIntLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterDoubleLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DoubleLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitDoubleLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.DoubleLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterBigDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BigDecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void exitBigDecimalLiteral (org.apache.spark.sql.catalyst.parser.SqlBaseParser.BigDecimalLiteralContext x$1)  { throw new RuntimeException(); }
  static public  void enterNonReserved (org.apache.spark.sql.catalyst.parser.SqlBaseParser.NonReservedContext x$1)  { throw new RuntimeException(); }
  static public  void enterEveryRule (org.antlr.v4.runtime.ParserRuleContext x$1)  { throw new RuntimeException(); }
  static public  void exitEveryRule (org.antlr.v4.runtime.ParserRuleContext x$1)  { throw new RuntimeException(); }
  static public  void visitTerminal (org.antlr.v4.runtime.tree.TerminalNode x$1)  { throw new RuntimeException(); }
  static public  void visitErrorNode (org.antlr.v4.runtime.tree.ErrorNode x$1)  { throw new RuntimeException(); }
  static public abstract  boolean canEqual (Object that)  ;
  static public abstract  boolean equals (Object that)  ;
  static public abstract  Object productElement (int n)  ;
  static public abstract  int productArity ()  ;
  static public  scala.collection.Iterator<java.lang.Object> productIterator ()  { throw new RuntimeException(); }
  static public  java.lang.String productPrefix ()  { throw new RuntimeException(); }
}
